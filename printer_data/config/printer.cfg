
# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design Trident 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Leadscrew Rotation Distance          [stepper_z], [stepper_z1], [stepper_z2]
## Z Endstop Switch location            [safe_z_home] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_260027001750344D30353320-if00
restart_method: command

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes

[include nevermore.cfg]
[include K-ShakeTune/*.cfg]
[include mainsail.cfg]
#[include PIS.cfg]
#[include bigtreetech-lis2dw-v1.0.cfg]
#[include Nis.cfg]
[exclude_object]
[gcode_arcs]
 resolution: 0.1
[include klicky-probe.cfg]
# This file contains all settings for KAMP, and must be included in printer.cfg with:
[include KAMP_Settings.cfg]
[include TEST_SPEED.cfg]

### The following [includes] can be uncommented from within KAMP_Settings.cfg. ###

#[include ./KAMP/Adaptive_Meshing.cfg]         # This file enables the use of adaptive meshing.
#[include ./KAMP/Line_Purge.cfg]             # Include to enable adaptive line purging configuration.
#[include ./KAMP/Voron_Purge.cfg]            # Include to enable adaptive Voron logo purging configuration.
#[include ./KAMP/Smart_Park.cfg]             # Include to enable the Smart Park function, which parks the printhead near the print area for final heating.


[printer]
kinematics: corexy
max_velocity:505
max_accel:30000
minimum_cruise_ratio: 0.95
#   Most moves will accelerate to a cruising speed, travel at that
#   cruising speed, and then decelerate. However, some moves that
#   travel a short distance could nominally accelerate and then
#   immediately decelerate. This option reduces the top speed of these
#   moves to ensure there is always a minimum distance traveled at a
#   cruising speed. That is, it enforces a minimum distance traveled
#   at cruising speed relative to the total distance traveled. It is
#   intended to reduce the top speed of short zigzag moves (and thus
#   reduce printer vibration from these moves). For example, a
#   minimum_cruise_ratio of 0.5 would ensure that a standalone 1.5mm
#   move would have a minimum cruising distance of 0.75mm. Specify a
#   ratio of 0.0 to disable this feature (there would be no minimum
#   cruising distance enforced between acceleration and deceleration).
#   The value specified here may be changed at runtime using the
#   SET_VELOCITY_LIMIT command. The default is 0.5.
square_corner_velocity: 15.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The value specified here may be
#   changed at runtime using the SET_VELOCITY_LIMIT command. The
#   default is 5mm/s.
#max_accel_to_decel:30000
#   This parameter is deprecated and should no longer be used.
max_z_velocity: 20         #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350

[input_shaper]
shaper_freq_x: 98.4
shaper_type_x: ei
shaper_freq_y: 63.2
shaper_type_y: mzv
#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_y]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: -2
## Uncomment below for 250mm build
position_endstop: 255
position_max: 255
##--------------------------------------------------------------------
homing_speed: 80   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[stepper_y1]
step_pin: PE6
dir_pin: !PA14
enable_pin: !PE0
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PC4
interpolate: False
run_current: 0.98
sense_resistor: 0.110
stealthchop_threshold: 0


[tmc2209 stepper_y1]
uart_pin: PD3
interpolate: False
run_current: 0.98
sense_resistor: 0.110
stealthchop_threshold: 0


##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_x]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG6
position_min: -2
##  Uncomment for 250mm build
position_endstop: 245
position_max: 245
##--------------------------------------------------------------------
homing_speed: 80  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[stepper_x1]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG6

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PD11
interpolate: False
run_current: 0.98
sense_resistor: 0.110
stealthchop_threshold: 0


[tmc2209 stepper_x1]
uart_pin: PE4
interpolate: False
run_current: 0.98
sense_resistor: 0.110
stealthchop_threshold: 0



#####################################################################
#   Z Stepper Settings
#####################################################################

##  Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4    
microsteps: 32
endstop_pin: PG10
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 3.660
## All builds use same Max Z
position_max: 250
position_min: -2.5
homing_speed: 10 # Leadscrews are slower than 2.4, 10 is a recommended max.
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Center
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: PC1
enable_pin: !PA0
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4  
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4  
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Extruder
#####################################################################

#   Connected to MOTOR_6
#   Heater - HE0
#   Thermistor - T0
[extruder]
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
rotation_distance: 22.2  #Bondtech 5mm Drive Gears
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA2
sensor_type: PT1000
sensor_pin: PF4
min_temp: 10
max_temp: 400
max_power: 1.0
min_extrude_temp: 120
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.045
pressure_advance_smooth_time: 0.018
max_extrude_cross_section: 6

[tmc2209 extruder]
uart_pin: PE1
interpolate: false
run_current: 0.65
sense_resistor: 0.11
stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: PA3
sensor_type: Generic 3950
sensor_pin: PF3
max_power: 1
min_temp: 0
max_temp: 140
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Probe
#####################################################################

[probe]

pin: PG15
x_offset: -2
y_offset: 21.0
z_offset: 0.87
speed: 10.0
samples: 2
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.005
samples_tolerance_retries: 3

#####################################################################
#   Fan Control
#####################################################################
[fan] #        CPAP print Cooling Fan\
pin: PG14 # for ocotopus pro Endstop 7 header
max_power: 1 # adjust below 1 if you would like the max speed to be slower
off_below: 0.09 # minimum speed where the fan starts spinning - on octopus pro this is correct - will be lower maybe 0 on mellow Super 8 because of different GPIO pullup and protection resistors
cycle_time: .0005 # = 2khz - CPAP fan driver recommended range is 2-50khz


[heater_fan hotend_fan]
##  Hotend Fan - FAN1
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

[temperature_fan MCU_fan]
sensor_type: temperature_host #This is what the Pi3's Temperature sensor is known as.
pin: PD12                     #Set this to your fan pin
max_temp: 80.0                #Set below 85C, Pi3+ MCU can be damaged at 85C
target_temp: 45.0             #Set this to your preferred running temperature
min_temp: 0
shutdown_speed: 0.0
kick_start_time: 0.5
off_below: 0.19
max_speed: 1.0
min_speed: 0.0
control: pid
pid_Kp: 2.0
pid_Ki: 5.0
pid_Kd: 0.5
pid_deriv_time: 2.0


[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

#[temperature_sensor chamber]
#sensor_type: Generic 3950
#sensor_pin: PF5
#min_temp: 0
#max_temp: 100
#gcode_id: C

[display_glyph chamber_icon]
data:
  ................
  ................
  .**************.
  *.......*......*
  *......*.......*
  *.....*........*
  *.....*........*
  *......**......*
  ****************
  *......**......*
  *..............*
  *..**********..*
  *..............*
  .**************.
  ................
  ................

[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  {% if 'temperature_sensor chamber' in printer %}
    ~chamber_icon~
    { "%3.0f" % (printer["temperature_sensor chamber"].temperature) }
    ~degrees~
  {% else %}
    ~feedrate~
    { "{:>4.0%}".format(printer.gcode_move.speed_factor) }
  {% endif %}


########## Bed Fans #########

[heater_generic heater_chamber]
heater_pin: PD13
sensor_type: Generic 3950
sensor_pin: PF5
control: pid
pid_Kp: 61.470837
pid_Ki: 0.5
pid_Kd: 0
pwm_cycle_time: 0.3
min_temp: -273.15
max_temp: 90

[verify_heater heater_chamber]
max_error: 120
check_gain_time: 120
hysteresis: 50
heating_gain: 1

[gcode_macro SET_CHAMBER]
gcode:
  {% set chamber_target = params.CHAMBER_TEMP|default(0)|float %}
  SET_HEATER_TEMPERATURE heater=heater_chamber target={chamber_target}

#[fan_generic BedFans]
#pin: PD13
#cycle_time: 0.05
#kick_start_time: 0.5



#[heater_fan exhaust_fan]
##  Exhaust fan - FAN3
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   LED Control
#####################################################################

[output_pin caselight]
pin: PD14
pwm:true
shutdown_value: 0
value:1
cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 2500

#[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
#home_xy_position:143,249
#speed:100
#z_hop:10

[z_tilt]

z_positions:
    -50, 18
    125, 298
    300, 18
points:
    30, 5
    122, 180
    220, 5
speed: 450
horizontal_move_z: 3
retries: 5
retry_tolerance: 0.0075

[bed_mesh]
speed: 450
horizontal_move_z: 3
mesh_min: 30, 30
mesh_max: 210,210
probe_count: 9, 9
mesh_pps: 5, 5
algorithm: bicubic
bicubic_tension: 0.1
zero_reference_position: 122 , 125
move_check_distance: 3
split_delta_z: 0.01

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

##  Uncomment the display that you have
#--------------------------------------------------------------------

#[display]
##  RepRapDiscount 128x64 Full Graphic Smart Controller
#lcd_type: st7920
#cs_pin: EXP1_4
#sclk_pin: EXP1_5
#sid_pin: EXP1_3
#menu_timeout: 40
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2

#[output_pin beeper]
#pin: EXP1_1

#--------------------------------------------------------------------

[display]
## mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
##  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.81
initial_GREEN: 0.12
initial_BLUE: 1.0
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#       SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------


#####################################################################
#   Macros
#####################################################################
[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}                                           # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}                                     # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}                                            # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}                                            # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}                                               # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}                                               # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}            # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}            # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}            # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}            # Adapt y_max to margin and fuzz constraints

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations

        { action_respond_info( "Algorithm: {}.".format(                                                                              
            (algorithm),                                                                                                            
        )) }

        { action_respond_info("Default probe count: {},{}.".format(                                                                  
            (probe_count[0]),                                                                                                       
            (probe_count[1]),                                                                                                       
        )) }

        { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
            (points_x),                                                                                                             
            (points_y),                                                                                                             
        )) }                                                                                                              

        {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
            (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
            (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
        )) }

        {% if mesh_margin > 0 %}                                                                                                    
            {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                (mesh_margin),                                                                                                      
                (mesh_margin),                                                                                       
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
        {% endif %}                                                                                                                 

        {% if fuzz_amount > 0 %}                                                                                                    
            {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                (fuzz_amount),                                                                                                      
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
        {% endif %}                                                                                                                 

        { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
            (adapted_x_min, adapted_y_min),                                                                                         
            (adapted_x_max, adapted_y_max),                                                                                         
        )) }

        {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                             # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}                                                                                                                     # End of verbose


[gcode_macro _PRIME_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900
    G1 Y3 X3 F18000
    G1 Z0.2 F900
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X100 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 Y-2 F1000
    G1 X-60 E9 F1000    ; Print second part of the line.
    G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

[gcode_macro CENTER]
gcode:
  G1 Y125 X125 Z5


[gcode_macro PRINT_START]

gcode:
    G28                      ; Home - G28 or G32 depending on printer.   

    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
 
    
        
    M117 Heating bed
    M190 S{ params.BED }       ; Wait for bed to get to target temperature.

  
    M107                       ; Print fan off
    

        {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "PC" %}
            SET_FAN_SPEED FAN=Nevermore_micro SPEED=0.6
            SET_FAN_SPEED FAN=Exhaust SPEED=0.25   
        {% endif %}

    

        {% if CHAMBER_TEMP > 0 and not printer["heater_generic heater_chamber"].temperature >= CHAMBER_TEMP|float%} #wait for chamber temps
            SET_CHAMBER CHAMBER_TEMP={CHAMBER_TEMP+1} #+1 °C for faster temp target arrival
            CENTER
            M106 S204 #part cooling fan 80%
            TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={CHAMBER_TEMP-0.1} #wait until chamber temp is very nearly reached
            SET_CHAMBER CHAMBER_TEMP={CHAMBER_TEMP} #set correct chamber target and let PID do its magic
           
        {% endif %}

        #in case chamber was already heated
        {% if CHAMBER_TEMP > 0 %}
            SET_CHAMBER CHAMBER_TEMP={CHAMBER_TEMP} 
        {% endif %}
        
        M107 #part cooling fan off
        #make sure hotend and bed are up to temp in all cases
        
        M109 S150
        M190 { params.BED }
    M117 Preheating nozzle
    M109 S150                  ; Wait for nozzle to heat to 150C - soften filament, but no oozing.

    M107                       ; Print fan off
    
    Z_TILT_ADJUST
   
     BED_MESH_CLEAR
     BED_MESH_CALIBRATE
    
    Smart_Park
    M117 Heating nozzle
    M109 S{ params.EXTRUDER }  ; Wait for nozzle to get to target temperature.
    Line_Purge

    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

  
[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-45.0 F3600                ; retract filament out of the hot zone
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% set z_park_abs = printer.toolhead.position.z + 25.0 %}
    {% if z_park_abs > max_z %}
        {% set z_park_abs = max_z %}
    {% endif %}

    G0 Z{z_safe} F3600                   ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000        ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                                 ; turn off fan
    G90                                  ; absolute positioning
    G0 Z{z_park_abs} F3600               ; move nozzle up away from the print
    G0 X{max_x / 2} Y{max_y - 5} F15000  ; park nozzle at rear
    M117 Done

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 52.234
#*# pid_ki = 2.599
#*# pid_kd = 262.476
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 26.683
#*# pid_ki = 1.999
#*# pid_kd = 89.053
#*#
#*# [stepper_z]
#*# position_endstop = -2.030
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.106354, -0.092916, 0.004584
#*# 	  0.025209, -0.004166, -0.037916
#*# 	  0.007396, -0.001979, -0.035104
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 5
#*# mesh_y_pps = 5
#*# algo = lagrange
#*# tension = 0.1
#*# min_x = 102.5
#*# max_x = 147.48
#*# min_y = 102.5
#*# max_y = 147.48000000000002
